<?xml version="1.0" encoding="utf-8"?>
<search> 
  
    
    <entry>
      <title><![CDATA[《一个人的朝圣》读书笔记]]></title>
      <url>/2017/04/16/reading/%E4%B8%80%E4%B8%AA%E4%BA%BA%E7%9A%84%E6%9C%9D%E5%9C%A3/</url>
      <content type="html"><![CDATA[<p><img src="/img/ygrdcs.jpg" alt=""><br>《一个人的朝圣》讲的是哈罗德在晚年收到以前好友的一封来信，信上说自己得了癌症，命不久矣，哈罗德在去寄信的时候，在加油站遇到一个小姑娘，她的一番话触动了哈罗德。哈罗德立即踏上了一个人的徒步之旅。</p>
<p>在哈罗德旅途中，碰到各种各样的人，有敬佩的，有同情的，有嘲笑的，有伸出援手的……哈罗德从一开始的害怕，到开始回忆自己的人生，一路不停的走过。</p>
<p>开始，作者借小姑娘的话，引出人要有“信念”，然后借旅途暗示人生。刚开始觉得哈罗德的行为很不可以思议，突然想起了以前语文课文的《蜀鄙二僧》，其实很多时候我们都是自己把自己吓住了，很多事，不去尝试，永远也无法完成。做事也不好瞻前顾后。</p>
<p>哈罗德在旅途中，不断回忆自己的人生，发现面对自己的亲人，很多时候都是想做而不做，这也是大部分人都存在的情况。总认为还有时间，不要紧，却不知长久如此，慢慢地失去很多。这让我想起了柴静《看见》里说的，人总是要争取的。</p>
]]></content>
      
        
    </entry>
    
    <entry>
      <title><![CDATA[docker常用命令]]></title>
      <url>/2017/04/16/docker%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/</url>
      <content type="html"><![CDATA[<p><img src="/img/docker.png" alt="docker命令"></p>
]]></content>
      
        
        <tags>
            
            <tag> docker </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[git常用命令]]></title>
      <url>/2017/04/16/git%E5%91%BD%E4%BB%A4/</url>
      <content type="html"><![CDATA[<p>经常遇到有些git 命令想不起来，在这里记录一下，方便自己查阅。</p>
<h2 id="submodule"><a href="#submodule" class="headerlink" title="submodule"></a>submodule</h2><p>Git 子模块功能允许你将一个Git仓库当作另外一个Git仓库的子目录。这允许你克隆另外一个仓库到你的项目中并且保持你的提交相对独立。</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># 添加子模块</span></div><div class="line">git submodule add 仓库地址 路径</div><div class="line"></div><div class="line"><span class="comment"># 下载子模块</span></div><div class="line">git submodule update --init --recursive</div></pre></td></tr></table></figure>
<h2 id="查看配置信息"><a href="#查看配置信息" class="headerlink" title="查看配置信息"></a>查看配置信息</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">git config --global --list</div></pre></td></tr></table></figure>
<h2 id="设置信息"><a href="#设置信息" class="headerlink" title="设置信息"></a>设置信息</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">git config --global user.name <span class="string">"lee"</span></div><div class="line">git config --global user.email <span class="string">"lee@test.com"</span></div><div class="line"></div><div class="line"><span class="comment"># 代理</span></div><div class="line">git config --global http.proxy http://proxy.com:80</div></pre></td></tr></table></figure>
<h2 id="获取最后一次提交信息"><a href="#获取最后一次提交信息" class="headerlink" title="获取最后一次提交信息"></a>获取最后一次提交信息</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># 最后一次所有信息</span></div><div class="line">git <span class="built_in">log</span> -1</div><div class="line"><span class="comment"># 最后一次commit id</span></div><div class="line">git rev-parse HEAD</div><div class="line"><span class="comment"># 最后一个commit信息</span></div><div class="line">git <span class="built_in">log</span> -1 --pretty=%B</div></pre></td></tr></table></figure>
<h2 id="cherry-pick使用"><a href="#cherry-pick使用" class="headerlink" title="cherry pick使用"></a>cherry pick使用</h2><p>有时候他们需要在多个分支上提交相同的代码，如果每一个都改一遍就太麻烦了。<br>这时候可以使用cherry pick，具体操作如下：</p>
<p>例如你现在 dev分支合入代码，并且已经提交。</p>
<ol>
<li><p>git log 查看你提交的commit 号</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">commit 3e54a734e42bb8f9e2c32c193de741432f544d28</div><div class="line">Author: lee &lt;lee@test.com&gt;</div><div class="line">Date:   Fri Apr 29 14:13:16 2016 +0800</div><div class="line"></div><div class="line">    614005245543 upgrade librados2* librbd1*</div></pre></td></tr></table></figure>
</li>
<li><p>git checkout 其它分支</p>
</li>
<li>git cherry-pick 查询到的commit号（例如上面的3e54a734e42bb8f9e2c32c193de741432f544d28）</li>
<li>这个时候你用git status 命令查看，切换的分支代码是已经add和commit的，由于不同的分支我们使用的EC单号不同，这个时候我们需要修改commit信息</li>
<li>使用git commit –amend 这个时候git会自动调用vi打开你的commit信息，你编辑成新的就可以了。</li>
<li>使用git push origin 远程分支名 提交代码</li>
</ol>
]]></content>
      
        <categories>
            
            <category> git </category>
            
        </categories>
        
        
        <tags>
            
            <tag> git </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Hexo使用]]></title>
      <url>/2017/04/16/hello-world/</url>
      <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="external">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="external">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="external">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="external">GitHub</a>.</p>
<h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo new <span class="string">"My New Post"</span></div></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="external">Writing</a></p>
<h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo server</div></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="external">Server</a></p>
<h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo generate</div></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="external">Generating</a></p>
<h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo deploy</div></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/deployment.html" target="_blank" rel="external">Deployment</a></p>
<h2 id="插件"><a href="#插件" class="headerlink" title="插件"></a>插件</h2><p><a href="https://github.com/PaicHyperionDev/hexo-generator-search" target="_blank" rel="external">站内搜索</a></p>
]]></content>
      
        
    </entry>
    
    <entry>
      <title><![CDATA[python collections模块]]></title>
      <url>/2017/04/04/collections%E4%BD%BF%E7%94%A8/</url>
      <content type="html"><![CDATA[<h2 id="namedtuple"><a href="#namedtuple" class="headerlink" title="namedtuple"></a>namedtuple</h2><p>namedtuple</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">from</span> collections <span class="keyword">import</span> namedtupule</div><div class="line"></div><div class="line">Point = namedtuple(<span class="string">'Point'</span>, [<span class="string">'x'</span>, <span class="string">'y'</span>])</div><div class="line">p = Point(<span class="number">1</span>, <span class="number">2</span>)</div><div class="line"></div><div class="line"><span class="keyword">print</span> p.x</div><div class="line"><span class="keyword">print</span> p.y</div></pre></td></tr></table></figure>
<h2 id="deque"><a href="#deque" class="headerlink" title="deque"></a>deque</h2><p>deque是双向链表实现的，相比list具有更高的插入和删除效率。</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">from</span> collections <span class="keyword">import</span> deque</div><div class="line"></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>q = deque([<span class="string">'a'</span>, <span class="string">'b'</span>, <span class="string">'c'</span>])</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>q.append(<span class="string">'x'</span>)</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>q.appendleft(<span class="string">'y'</span>)</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>q</div><div class="line">deque([<span class="string">'y'</span>, <span class="string">'a'</span>, <span class="string">'b'</span>, <span class="string">'c'</span>, <span class="string">'x'</span>])</div></pre></td></tr></table></figure>
<h2 id="defaultdict"><a href="#defaultdict" class="headerlink" title="defaultdict"></a>defaultdict</h2><p>在使用普通的dict类型时，我们在取值时需要判断key是否存在，如果我们希望当一个key不存在时返回默认值，我们可以使用defaultdict。</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">from</span> collections <span class="keyword">import</span> defaultdict</div><div class="line"></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>dd = defaultdict(lamba: <span class="string">'No key'</span>)</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>dd[<span class="string">'a'</span>] = <span class="string">'A'</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">print</span> dd[<span class="string">'a'</span>]</div><div class="line"><span class="string">'A'</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">print</span> dd[<span class="string">'b'</span>]</div><div class="line"><span class="string">'No key'</span></div></pre></td></tr></table></figure>
<h2 id="OrderedDict"><a href="#OrderedDict" class="headerlink" title="OrderedDict"></a>OrderedDict</h2><p>OrderedDIct见名知意，就是key是有序的。</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">from</span> collections <span class="keyword">import</span> OrderedDict</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>od = OrderDict([(<span class="string">'z'</span>, <span class="number">1</span>), (<span class="string">'y'</span>, <span class="number">2</span>), (<span class="string">'x'</span>, <span class="number">3</span>)])</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>od.keys()</div><div class="line">[<span class="string">'z'</span>, <span class="string">'y'</span>, <span class="string">'x'</span>]</div></pre></td></tr></table></figure>
<p>需要注意的是，OrderedDict key是按插入的顺序排列的，而不是字符串大小。</p>
<h2 id="Counter"><a href="#Counter" class="headerlink" title="Counter"></a>Counter</h2><p> Counter是一个简单的计数器。</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">from</span> collections <span class="keyword">import</span> Counter</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>c = Counter()</div><div class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">for</span> ch <span class="keyword">in</span> <span class="string">"aaaabb"</span>:</div><div class="line">...		c[ch] += <span class="number">1</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>c</div><div class="line">Counter(&#123;<span class="string">'a'</span>: <span class="number">4</span>, <span class="string">'b'</span>: <span class="number">2</span>&#125;)</div></pre></td></tr></table></figure>
]]></content>
      
        <categories>
            
            <category> python </category>
            
        </categories>
        
        
        <tags>
            
            <tag> python </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[ipa镜像制作]]></title>
      <url>/2017/04/04/ironic%E9%95%9C%E5%83%8F%E5%88%B6%E4%BD%9C/</url>
      <content type="html"><![CDATA[<h2 id="镜像介绍"><a href="#镜像介绍" class="headerlink" title="镜像介绍"></a>镜像介绍</h2><p>ironic部署需要两组镜像，一组是deploy镜像，另一组是user镜像，其中deploy镜像包括ipa服务。user镜像又分为whole disk image和partition image，其中whole disk image 是带bootloader和分区表的。</p>
<h2 id="工具"><a href="#工具" class="headerlink" title="工具"></a>工具</h2><p>制作ironic deploy镜像其实就是在普通镜像中添加一个ipa服务，用来裸机和ironic通信。官方推荐制作镜像的工具有两个，<br>分别是CoreOS tools和disk-image-builder</p>
<p>具体链接如下：<a href="https://docs.openstack.org/project-install-guide/baremetal/ocata/deploy-ramdisk.html" target="_blank" rel="external">building deploy ramdisk</a></p>
<h3 id="CoreOS"><a href="#CoreOS" class="headerlink" title="CoreOS"></a>CoreOS</h3><p>如果你不想自己制作镜像，可以从<a href="http://tarballs.openstack.org/ironic-python-agent/coreos/files/" target="_blank" rel="external">CoreOS img</a>下载</p>
<p>可以使用官方文档中的方法自己制作：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">cd</span> ironic-python-agent/imagebuild/coreos</div><div class="line">sudo systemctl start docker</div><div class="line">sudo make</div><div class="line">sudo make iso</div></pre></td></tr></table></figure></p>
<h3 id="disk-image-builder"><a href="#disk-image-builder" class="headerlink" title="disk-image-builder"></a>disk-image-builder</h3><p>这个工具可以自定义，通过element的方式添加很多特性。<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># deploy image</span></div><div class="line">disk-image-create ironic-agent ubuntu -o ironic-deploy</div><div class="line"></div><div class="line"><span class="comment"># whole disk image</span></div><div class="line">disk-image-create ubuntu vm dhcp-all-interfacec -o my-image</div><div class="line"></div><div class="line"><span class="comment"># partation image</span></div><div class="line">disk-image-create ubuntu baremetal dhcp-all-interfacec -o my-image</div></pre></td></tr></table></figure></p>
<h2 id="密码问题"><a href="#密码问题" class="headerlink" title="密码问题"></a>密码问题</h2><p>如果是CoreOS镜像，修改<code>/etc/ironic/ironic.conf</code>，在pxe_append_params参数后面添加：sshkey=”ssh-rsa AAAA…”，或者添加<code>coreos.autologin</code>然后重启ironic-conductor服务，这时你就可以使用ssh core@<ip-address-of-node>登录了。这里的sshkey最好写conductor节点的。</ip-address-of-node></p>
<p>如果是disk-image-builder镜像，有两种方法添加密码：</p>
<ul>
<li><p>devuser<br>这种方式一般在测试时使用，在正式环境中不推荐使用。原理是在制作镜像的时候，通过环境变量注入密码，然后diskimage-builder在做镜像的时候把密码写进去。</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">export</span> DIB_DEV_USER_USERNAME=username</div><div class="line"><span class="built_in">export</span> DIB_DEV_USER_PWDLESS_SUDO=yes</div><div class="line"><span class="built_in">export</span> DIB_DEV_USER_AUTHORIZED_KEYS=<span class="variable">$HOME</span>/.ssh/id_rsa.pub</div><div class="line"></div><div class="line">disk-image-create -o ironic-deploy ubuntu ironic-agent devuser</div></pre></td></tr></table></figure>
</li>
<li><p>dynamic-login<br>这种方式是官方推荐的工具，因为devuser方式不太安全，所有人都可以登录。dynamic-login的思想是在ipa镜像里起一个dynamic-login服务，然后通过cmd参数把ssk public key或者密码在上电的时候带进来，这样就可以顺利登录系统了。<br>关于dynamic-log的文档可以参考：<a href="https://docs.openstack.org/developer/diskimage-builder/elements/dynamic-login/README.html" target="_blank" rel="external">dynamic-log</a></p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">disk-image-create ironic-agent ubuntu dynamic-log -o ironic-deploy</div></pre></td></tr></table></figure>
</li>
</ul>
]]></content>
      
        <categories>
            
            <category> openstack </category>
            
        </categories>
        
        
        <tags>
            
            <tag> ipa </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[ironic代码走读]]></title>
      <url>/2017/04/04/ironic%E8%B0%83%E7%94%A8%E6%B5%81%E7%A8%8B/</url>
      <content type="html"><![CDATA[<h2 id="ironic调用流程"><a href="#ironic调用流程" class="headerlink" title="ironic调用流程"></a>ironic调用流程</h2><p>在openstack中，各组件之间是通过api调用的，组件内部是通过rpc调用的。例如我们通过nova来部署裸机。你首先在命令行敲下nova boot命令，nova经过schedule只有，通过ironic api来通知ironic进行部署。</p>
<p>ironic的api入口在<code>ironic/api/controllers/v1/nodes.py</code></p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">NodeStatesController</span><span class="params">(rest.RestController)</span>:</span></div><div class="line"><span class="meta">    @METRICS.timer('NodeStatesController.provision')</span></div><div class="line"><span class="meta">    @expose.expose(None, types.uuid_or_name, wtypes.text,</span></div><div class="line">                   wtypes.text, types.jsontype,</div><div class="line">                   status_code=http_client.ACCEPTED)</div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">provision</span><span class="params">(self, node_ident, target, configdrive=None,</span></span></div><div class="line">                  clean_steps=None):</div><div class="line">        <span class="comment"># 设置节点状态</span></div><div class="line">    	<span class="keyword">if</span> target == ir_states.ACTIVE:</div><div class="line">            pecan.request.rpcapi.do_node_deploy(pecan.request.context,</div><div class="line">                                                rpc_node.uuid, <span class="keyword">False</span>,</div><div class="line">                                                configdrive, topic)</div><div class="line">        ...</div><div class="line">        url_args = <span class="string">'/'</span>.join([node_ident, <span class="string">'states'</span>])</div><div class="line">        pecan.response.location = link.build_url(<span class="string">'nodes'</span>, url_args)</div></pre></td></tr></table></figure>
<p>我们可以看到，这里通过RPC调用<code>do_node_deploy</code>方法，需要注意的是上面的调用是异步的，HTTP只是返回202，然后在后台执行实际的代码。RPC API代码如下：</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># file: ironic/conductor/rpcapi.py</span></div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">do_node_deploy</span><span class="params">(self, context, node_id, rebuild, configdrive,</span></span></div><div class="line">                       topic=None):</div><div class="line">        </div><div class="line">        cctxt = self.client.prepare(topic=topic <span class="keyword">or</span> self.topic, version=<span class="string">'1.22'</span>)</div><div class="line">        <span class="keyword">return</span> cctxt.call(context, <span class="string">'do_node_deploy'</span>, node_id=node_id,</div><div class="line">                          rebuild=rebuild, configdrive=configdrive)</div></pre></td></tr></table></figure>
<p>实现代码：</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div><div class="line">122</div><div class="line">123</div><div class="line">124</div><div class="line">125</div></pre></td><td class="code"><pre><div class="line"> <span class="comment"># file: manager.py   </span></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">do_node_deploy</span><span class="params">(self, context, node_id, rebuild=False,</span></span></div><div class="line">                       configdrive=None):</div><div class="line">		</div><div class="line">        <span class="comment"># context包括http请求的内容</span></div><div class="line">        <span class="keyword">with</span> task_manager.acquire(context, node_id, shared=<span class="keyword">False</span>,</div><div class="line">                                  purpose=<span class="string">'node deployment'</span>) <span class="keyword">as</span> task:</div><div class="line">            node = task.node</div><div class="line">            <span class="keyword">if</span> node.maintenance:</div><div class="line">                <span class="keyword">raise</span> exception.NodeInMaintenance(op=_(<span class="string">'provisioning'</span>),</div><div class="line">                                                  node=node.uuid)</div><div class="line"></div><div class="line">            <span class="keyword">if</span> rebuild:</div><div class="line">                event = <span class="string">'rebuild'</span></div><div class="line"></div><div class="line">                <span class="comment"># Note(gilliard) Clear these to force the driver to</span></div><div class="line">                <span class="comment"># check whether they have been changed in glance</span></div><div class="line">                <span class="comment"># NOTE(vdrok): If image_source is not from Glance we should</span></div><div class="line">                <span class="comment"># not clear kernel and ramdisk as they're input manually</span></div><div class="line">                <span class="keyword">if</span> glance_utils.is_glance_image(</div><div class="line">                        node.instance_info.get(<span class="string">'image_source'</span>)):</div><div class="line">                    instance_info = node.instance_info</div><div class="line">                    instance_info.pop(<span class="string">'kernel'</span>, <span class="keyword">None</span>)</div><div class="line">                    instance_info.pop(<span class="string">'ramdisk'</span>, <span class="keyword">None</span>)</div><div class="line">                    node.instance_info = instance_info</div><div class="line">            <span class="keyword">else</span>:</div><div class="line">                event = <span class="string">'deploy'</span></div><div class="line"></div><div class="line">            driver_internal_info = node.driver_internal_info</div><div class="line">            <span class="comment"># Infer the image type to make sure the deploy driver</span></div><div class="line">            <span class="comment"># validates only the necessary variables for different</span></div><div class="line">            <span class="comment"># image types.</span></div><div class="line">            <span class="comment"># NOTE(sirushtim): The iwdi variable can be None. It's up to</span></div><div class="line">            <span class="comment"># the deploy driver to validate this.</span></div><div class="line">            iwdi = images.is_whole_disk_image(context, node.instance_info)</div><div class="line">            driver_internal_info[<span class="string">'is_whole_disk_image'</span>] = iwdi</div><div class="line">            node.driver_internal_info = driver_internal_info</div><div class="line">            node.save()</div><div class="line"></div><div class="line">            <span class="keyword">try</span>:</div><div class="line">                task.driver.power.validate(task)</div><div class="line">                task.driver.deploy.validate(task)</div><div class="line">            <span class="keyword">except</span> exception.InvalidParameterValue <span class="keyword">as</span> e:</div><div class="line">                <span class="keyword">raise</span> exception.InstanceDeployFailure(</div><div class="line">                    _(<span class="string">"Failed to validate deploy or power info for node "</span></div><div class="line">                      <span class="string">"%(node_uuid)s. Error: %(msg)s"</span>) %</div><div class="line">                    &#123;<span class="string">'node_uuid'</span>: node.uuid, <span class="string">'msg'</span>: e&#125;)</div><div class="line"></div><div class="line">            <span class="keyword">try</span>:</div><div class="line">                task.process_event(</div><div class="line">                    event,</div><div class="line">                    callback=self._spawn_worker,</div><div class="line">                    call_args=(do_node_deploy, task, self.conductor.id,</div><div class="line">                               configdrive),</div><div class="line">                    err_handler=utils.provisioning_error_handler)</div><div class="line">            <span class="keyword">except</span> exception.InvalidState:</div><div class="line">                <span class="keyword">raise</span> exception.InvalidStateRequested(</div><div class="line">                    action=event, node=task.node.uuid,</div><div class="line">                    state=task.node.provision_state)</div><div class="line"></div><div class="line">                </div><div class="line"><span class="meta">@METRICS.timer('do_node_deploy')</span></div><div class="line"><span class="meta">@task_manager.require_exclusive_lock</span></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">do_node_deploy</span><span class="params">(task, conductor_id, configdrive=None)</span>:</span></div><div class="line">    <span class="string">"""Prepare the environment and deploy a node."""</span></div><div class="line">    node = task.node</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">handle_failure</span><span class="params">(e, task, logmsg, errmsg)</span>:</span></div><div class="line">        <span class="comment"># NOTE(deva): there is no need to clear conductor_affinity</span></div><div class="line">        task.process_event(<span class="string">'fail'</span>)</div><div class="line">        args = &#123;<span class="string">'node'</span>: task.node.uuid, <span class="string">'err'</span>: e&#125;</div><div class="line">        LOG.error(logmsg, args)</div><div class="line">        node.last_error = errmsg % e</div><div class="line"></div><div class="line">    <span class="keyword">try</span>:</div><div class="line">        <span class="keyword">try</span>:</div><div class="line">            <span class="keyword">if</span> configdrive:</div><div class="line">                _store_configdrive(node, configdrive)</div><div class="line">        <span class="keyword">except</span> exception.SwiftOperationError <span class="keyword">as</span> e:</div><div class="line">            <span class="keyword">with</span> excutils.save_and_reraise_exception():</div><div class="line">                handle_failure(</div><div class="line">                    e, task,</div><div class="line">                    _LE(<span class="string">'Error while uploading the configdrive for '</span></div><div class="line">                        <span class="string">'%(node)s to Swift'</span>),</div><div class="line">                    _(<span class="string">'Failed to upload the configdrive to Swift. '</span></div><div class="line">                      <span class="string">'Error: %s'</span>))</div><div class="line"></div><div class="line">        <span class="keyword">try</span>:</div><div class="line">            task.driver.deploy.prepare(task)</div><div class="line">        <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</div><div class="line">            <span class="keyword">with</span> excutils.save_and_reraise_exception():</div><div class="line">                handle_failure(</div><div class="line">                    e, task,</div><div class="line">                    _LE(<span class="string">'Error while preparing to deploy to node %(node)s: '</span></div><div class="line">                        <span class="string">'%(err)s'</span>),</div><div class="line">                    _(<span class="string">"Failed to prepare to deploy. Error: %s"</span>))</div><div class="line"></div><div class="line">        <span class="keyword">try</span>:</div><div class="line">            new_state = task.driver.deploy.deploy(task)</div><div class="line">        <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</div><div class="line">            <span class="keyword">with</span> excutils.save_and_reraise_exception():</div><div class="line">                handle_failure(</div><div class="line">                    e, task,</div><div class="line">                    _LE(<span class="string">'Error in deploy of node %(node)s: %(err)s'</span>),</div><div class="line">                    _(<span class="string">"Failed to deploy. Error: %s"</span>))</div><div class="line"></div><div class="line">        <span class="comment"># Update conductor_affinity to reference this conductor's ID</span></div><div class="line">        <span class="comment"># since there may be local persistent state</span></div><div class="line">        node.conductor_affinity = conductor_id</div><div class="line"></div><div class="line">        <span class="comment"># NOTE(deva): Some drivers may return states.DEPLOYWAIT</span></div><div class="line">        <span class="comment">#             eg. if they are waiting for a callback</span></div><div class="line">        <span class="keyword">if</span> new_state == states.DEPLOYDONE:</div><div class="line">            task.process_event(<span class="string">'done'</span>)</div><div class="line">            LOG.info(_LI(<span class="string">'Successfully deployed node %(node)s with '</span></div><div class="line">                         <span class="string">'instance %(instance)s.'</span>),</div><div class="line">                     &#123;<span class="string">'node'</span>: node.uuid, <span class="string">'instance'</span>: node.instance_uuid&#125;)</div><div class="line">        <span class="keyword">elif</span> new_state == states.DEPLOYWAIT:</div><div class="line">            task.process_event(<span class="string">'wait'</span>)</div><div class="line">        <span class="keyword">else</span>:</div><div class="line">            LOG.error(_LE(<span class="string">'Unexpected state %(state)s returned while '</span></div><div class="line">                          <span class="string">'deploying node %(node)s.'</span>),</div><div class="line">                      &#123;<span class="string">'state'</span>: new_state, <span class="string">'node'</span>: node.uuid&#125;)</div><div class="line">    <span class="keyword">finally</span>:</div><div class="line">        node.save()</div></pre></td></tr></table></figure>
]]></content>
      
        <categories>
            
            <category> openstack </category>
            
        </categories>
        
        
        <tags>
            
            <tag> ironic </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[异步I/O]]></title>
      <url>/2017/04/02/%E5%BC%82%E6%AD%A5IO/</url>
      <content type="html"><![CDATA[<h2 id="Unix-IO模型"><a href="#Unix-IO模型" class="headerlink" title="Unix IO模型"></a>Unix IO模型</h2><p>Unix系统有5种IO模型，我们先看看最常见的IO模型－阻塞式I/O模型</p>
<h3 id="阻塞式I-O模型"><a href="#阻塞式I-O模型" class="headerlink" title="阻塞式I/O模型"></a>阻塞式I/O模型</h3><p><img src="/img/io_01.png" alt="io_01"></p>
<p>我们最容易想到的就是阻塞式I/O模型，这种模型实现简单，但是效率低下。</p>
<h3 id="非阻塞I-O模型"><a href="#非阻塞I-O模型" class="headerlink" title="非阻塞I/O模型"></a>非阻塞I/O模型</h3><p><img src="/img/io_02.png" alt="io_02"></p>
<h3 id="I-O复用模型"><a href="#I-O复用模型" class="headerlink" title="I/O复用模型"></a>I/O复用模型</h3><p><img src="/img/io_03.png" alt="io_03"></p>
<h3 id="信号驱动式I-O模型"><a href="#信号驱动式I-O模型" class="headerlink" title="信号驱动式I/O模型"></a>信号驱动式I/O模型</h3><p><img src="/img/io_04.png" alt="io_04"></p>
<h3 id="异步I-O模型"><a href="#异步I-O模型" class="headerlink" title="异步I/O模型"></a>异步I/O模型</h3><p><img src="/img/io_05.png" alt="io_05"></p>
<h3 id="各种I-O模型的比较"><a href="#各种I-O模型的比较" class="headerlink" title="各种I/O模型的比较"></a>各种I/O模型的比较</h3><p>对比上面的几种模型，前4种模型的区别主要在于第一阶段，它们第二阶段都是一样的：在数据从内核态复制到用户态时，进程处于阻塞状态。相反，异步I/O在两个阶段都处于非阻塞状态。</p>
<h2 id="为什么使用异步IO"><a href="#为什么使用异步IO" class="headerlink" title="为什么使用异步IO"></a>为什么使用异步IO</h2><p>例如，你要写一个爬虫程序（I/O密集型），如果采用同步I/O。如果采用最简单的阻塞式I/O，可能会花很长时间才能完成，而这期间，进程大部分时间都是阻塞的。你可能会说可以使用多线程活着是多进程，这也确实是一个方法。但是一个系统的资源是有限的，不能创建无限个线程。且大部分系统socket数量有限制，也不能创建无数了socket连接。</p>
<p>所以在I/O密集型程序中，最好使用异步I/O，异步I/O的思想是在一个线程里处理问题，遇到I/O操作，我可以继续处理其它问题，等到内核把数据获取完了并拷贝到应用程序，再回过头来继续处理。</p>
]]></content>
      
        <categories>
            
            <category> python </category>
            
        </categories>
        
        
        <tags>
            
            <tag> I/O </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[packstack安装openstack]]></title>
      <url>/2017/04/02/packstack%E5%AE%89%E8%A3%85openstack/</url>
      <content type="html"><![CDATA[<h2 id="环境准备"><a href="#环境准备" class="headerlink" title="环境准备"></a>环境准备</h2><p>这里我们以CentOS7为例，安装openstack ocata版本，其它版本安装方法类似。packstack目前对NetworkManager还不支持，我们修改下配置：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">systemctl disable firewalld</div><div class="line">systemctl stop firewalld</div><div class="line">systemctl disable NetworkManager</div><div class="line">systemctl stop NetworkManager</div><div class="line">systemctl enable network</div><div class="line">systemctl start network</div></pre></td></tr></table></figure></p>
<h3 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"># 添加packstack yum源</div><div class="line">yum -y install centos-release-openstack-ocata</div><div class="line"></div><div class="line"># 安装openstack-packstack</div><div class="line">yum -y install openstack-packstack</div><div class="line"></div><div class="line"># 生成answer-file</div><div class="line">packstack --gen-answer-file=filename</div></pre></td></tr></table></figure>
<h3 id="安装openstack"><a href="#安装openstack" class="headerlink" title="安装openstack"></a>安装openstack</h3><p>如果你安装的是ocata版本，这里packstack有电小bug，有几个文件需要修改一下，参考：</p>
<p><a href="https://www.redhat.com/archives/rdo-list/2017-March/msg00011.html" target="_blank" rel="external">问题描述</a></p>
<p>两个bug的review链接：</p>
<ul>
<li><a href="https://review.openstack.org/#/c/440258/" target="_blank" rel="external">https://review.openstack.org/#/c/440258/</a></li>
<li><a href="https://review.openstack.org/442551" target="_blank" rel="external">https://review.openstack.org/442551</a></li>
</ul>
<p>照着review提交的内容修改一下就可以了。接着使用下面的命令安装openstack。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">packstack --answer-file=filename</div></pre></td></tr></table></figure>
]]></content>
      
        <categories>
            
            <category> openstack </category>
            
        </categories>
        
        
        <tags>
            
            <tag> packstack </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[ironic常用链接]]></title>
      <url>/2017/03/28/ironic%E5%B8%B8%E7%94%A8%E9%93%BE%E6%8E%A5/</url>
      <content type="html"><![CDATA[<h2 id="镜像"><a href="#镜像" class="headerlink" title="镜像"></a>镜像</h2><ul>
<li><a href="http://download.cirros-cloud.net/" target="_blank" rel="external">cirros</a></li>
<li><a href="http://tarballs.openstack.org/ironic-python-agent/coreos/files/" target="_blank" rel="external">IPA镜像</a></li>
</ul>
<h2 id="API"><a href="#API" class="headerlink" title="API"></a>API</h2><p><a href="https://developer.openstack.org/api-ref/baremetal/" target="_blank" rel="external">api</a></p>
<h2 id="状态机"><a href="#状态机" class="headerlink" title="状态机"></a>状态机</h2><p><a href="https://docs.openstack.org/developer/ironic/_images/states.svg" target="_blank" rel="external">状态图</a></p>
<h2 id="架构"><a href="#架构" class="headerlink" title="架构"></a>架构</h2><p><a href="https://docs.openstack.org/developer/ironic/deploy/user-guide.html" target="_blank" rel="external">体系结构</a></p>
<h2 id="IRC"><a href="#IRC" class="headerlink" title="IRC"></a>IRC</h2><p><a href="http://eavesdrop.openstack.org/meetings/ironic/2017/" target="_blank" rel="external">会议记录</a></p>
]]></content>
      
        <categories>
            
            <category> openstack </category>
            
        </categories>
        
        
        <tags>
            
            <tag> ironic </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[常用shell]]></title>
      <url>/2017/03/12/%E5%B8%B8%E7%94%A8shell/</url>
      <content type="html"><![CDATA[<h2 id="获取脚本所在路径"><a href="#获取脚本所在路径" class="headerlink" title="获取脚本所在路径"></a>获取脚本所在路径</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">export</span> SCRIPT_HOME=$(dirname $(readlink <span class="_">-f</span> <span class="variable">$0</span>))</div></pre></td></tr></table></figure>
<h2 id="解压压缩"><a href="#解压压缩" class="headerlink" title="解压压缩"></a>解压压缩</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># tar.gz</span></div><div class="line">tar -zxvf filename.tar.gz </div><div class="line">tar -zcvf filename.tar.gz target</div><div class="line"></div><div class="line"><span class="comment"># tar</span></div><div class="line">tar -xvf filename.tar </div><div class="line">tar -cvf filename.tar target</div><div class="line"></div><div class="line"><span class="comment"># zip</span></div><div class="line">zip -r ./*</div><div class="line">unzip filename.zip</div></pre></td></tr></table></figure>
<h3 id="vmlinuz解压"><a href="#vmlinuz解压" class="headerlink" title="vmlinuz解压"></a>vmlinuz解压</h3><p>vmlinuz是采用 gzip 压缩的，但它不仅是一个压缩文件，而且在这两个文件的开头部分内嵌有 gzip解压缩代码，所以你不能用 gunzip 或 gzip -dc 命令来解压 vmlinuz。可以用如下的操作来解压vmlinuz：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line">boot]<span class="comment"># file vmlinuz-2.6.32-372.el6_jay.x86_64</span></div><div class="line">vmlinuz-2.6.32-372.el6_jay.x86_64: Linux kernel x86 boot executable bzImage, version 2.6.32-372.el6.bz635846_jay.x86, RO-rootFS, root_dev 0x802, swap_dev 0x3, Normal VGA</div><div class="line"> </div><div class="line"><span class="comment"># 查找gzip压缩内容的开始头部，通过“1f 8b 08”这个签名来查找</span></div><div class="line">boot]<span class="comment"># od -t x1 -A d vmlinuz-2.6.32-372.el6_jay.x86_64 | grep "1f 8b 08"</span></div><div class="line">0014432 48 8d 83 70 81 3d 00 ff e0 1f 8b 08 00 c4 01 9c</div><div class="line"><span class="comment"># 计算bizip压缩内容开始处的offset，为：14432 + 9 = 14441  （9是从0014431起到"if 8b 08"之间的字节数）</span></div><div class="line"><span class="comment"># 解压出被压缩的kernel中的内容</span></div><div class="line">boot]<span class="comment"># dd \if=vmlinuz-2.6.32-372.el6_jay.x86_64 bs=1 skip=14441 | zcat &gt; vmlinux-jay</span></div><div class="line"> </div><div class="line">gzip: stdin: decompression OK, trailing garbage ignored</div><div class="line">boot]<span class="comment"># file vmlinux-jay</span></div><div class="line">vmlinux-jay: ELF 64-bit LSB executable, x86-64, version 1 (SYSV), statically linked, stripped</div><div class="line"> </div><div class="line">boot]<span class="comment"># strings vmlinux-jay | grep 'Linux version'</span></div><div class="line">Linux version 2.6.32-372.el6.bz635846_jay.x86_64 (n0ano@sobek.n0ano.com) (gcc version 4.4.4 20100726 (Red Hat 4.4.4-13) (GCC) ) <span class="comment">#1 SMP Tue May 21 17:21:56 MDT 2013</span></div><div class="line">boot]<span class="comment"># strings vmlinux-jay | grep '/sbin/'</span></div><div class="line">/sbin/init</div><div class="line">/sbin/request-key</div><div class="line">/sbin/poweroff</div><div class="line">/sbin/modprobe</div></pre></td></tr></table></figure></p>
<h3 id="initrd解压"><a href="#initrd解压" class="headerlink" title="initrd解压"></a>initrd解压</h3><p>initrd一般是一个用gzip压缩的cpio格式的image，所以可以先gunzip解压，然后用cpio命令提取里面的信息。<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">cp /boot/initramfs-3.9.0-rc3+.img initramfs-3.9.0-rc3+.img.gz</div><div class="line">gunzip <span class="_">-d</span> initramfs-3.9.0-rc3+.img.gz</div><div class="line">cpio -idmv &lt; initramfs-3.9.0-rc3+.img</div></pre></td></tr></table></figure></p>
<h2 id="lvm"><a href="#lvm" class="headerlink" title="lvm"></a>lvm</h2><h3 id="扩容"><a href="#扩容" class="headerlink" title="扩容"></a>扩容</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># 先用fdisk创建新分区，gpt分区使用gdisk命令</span></div><div class="line"></div><div class="line"><span class="comment"># 刷新分区表</span></div><div class="line">partprobe</div><div class="line"></div><div class="line"><span class="comment">#　创建pv</span></div><div class="line">pvcreate /dev/sda5</div><div class="line"></div><div class="line"><span class="comment"># vg扩容</span></div><div class="line">vgextend vg_sys /dev/sda5</div><div class="line"></div><div class="line"><span class="comment">#　lv扩容</span></div><div class="line">lvextend <span class="_">-l</span> +100%FREE  /dev/mapper/vg_sys-lv_root</div><div class="line"></div><div class="line">vgchange -ay vg_sys</div><div class="line">resize2fs /dev/mapper/vg_sys-lv_root</div></pre></td></tr></table></figure>
]]></content>
      
        <categories>
            
            <category> shell </category>
            
        </categories>
        
        
        <tags>
            
            <tag> shell </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[ironic inspector流程]]></title>
      <url>/2017/03/11/ironic-inspector%E6%B5%81%E7%A8%8B/</url>
      <content type="html"><![CDATA[<h1 id="inspector流程"><a href="#inspector流程" class="headerlink" title="inspector流程"></a>inspector流程</h1><h2 id="ironic-处理阶段"><a href="#ironic-处理阶段" class="headerlink" title="ironic 处理阶段"></a>ironic 处理阶段</h2><p>首先我们通过ironic的api，将node节点状态设置为manage，然后再设置为inspect。</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># ironic/api/controllers/v1/node.py</span></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">provision</span><span class="params">()</span>:</span></div><div class="line">    ...</div><div class="line">    <span class="keyword">elif</span> target == ir_state.VERBS[<span class="string">'inspect'</span>]:</div><div class="line">        pecan.request.rpcapi.inspect_hardware()</div></pre></td></tr></table></figure>
<p>这里 provision是一个修改node状态的api，我们在request请求中，将target设置为inspect。接着会通过rpc调<code>inspect_hardware(rpc.node_uuid, topic=topic)</code>方法。最终会调用manager.py的<code>inspect_hardware</code>方法。</p>
<p>inspect的具体实现是跟driver有关的，在driver.inspect.inspect_hardware中。</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># ironic/drivers/modules/inspector.py</span></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">_start_inspection</span><span class="params">(node_uuid, context)</span>:</span></div><div class="line">    <span class="keyword">try</span>:</div><div class="line">        _call_inspector(client.introspect, node_uuid, context)</div><div class="line">        ...</div><div class="line">        </div><div class="line"><span class="comment"># ironic_inspector_client/client.py</span></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">introspect</span><span class="params">(uuid, base_url=None, auth_token=None,</span></span></div><div class="line">               new_ipmi_password=None, new_ipmi_username=None,</div><div class="line">               api_version=DEFAULT_API_VERSION, session=None, **kwargs):</div><div class="line"></div><div class="line">    c = v1.ClientV1(api_version=api_version, auth_token=auth_token,</div><div class="line">                    inspector_url=base_url, session=session, **kwargs)</div><div class="line">    <span class="keyword">return</span> c.introspect(uuid, new_ipmi_username=new_ipmi_username,</div><div class="line">                        new_ipmi_password=new_ipmi_password)</div><div class="line"></div><div class="line"><span class="comment"># ironic_inspector_client/v1.py</span></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">introspect</span><span class="params">(self, uuid, new_ipmi_password=None, new_ipmi_username=None)</span>:</span></div><div class="line">    ...</div><div class="line">    params = &#123;<span class="string">'new_ipmi_username'</span>: new_ipmi_username,</div><div class="line">              <span class="string">'new_ipmi_password'</span>: new_ipmi_password&#125;</div><div class="line">    self.request(<span class="string">'post'</span>, <span class="string">'/introspection/%s'</span> % uuid, params=params)</div></pre></td></tr></table></figure>
<p>然后创建一个inspector的client，并调用intropect函数。这个最终会发送post请求到/v1/introspection/<uuid>，并传入参数新的ipmi信息（如果需要更新ipmi用户名或者密码）</uuid></p>
<h2 id="inspector处理阶段"><a href="#inspector处理阶段" class="headerlink" title="inspector处理阶段"></a>inspector处理阶段</h2><p>inspector的api是用flask实现的，这里我们根据url找到对应的代码：</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># main.py</span></div><div class="line"><span class="meta">@app.route('/v1/introspection/&lt;uuid&gt;')</span></div><div class="line"><span class="meta">@convert_exceptions</span></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">api_introspection</span><span class="params">(uuid)</span>:</span></div><div class="line">    ...</div><div class="line">    introspect.introspect(uuid,</div><div class="line">                          new_ipmi_credentials=new_ipmi_credentails,</div><div class="line">                          token=flask.request.headers.get(<span class="string">'X-Auth-Token'</span>))</div><div class="line">    <span class="keyword">return</span> <span class="string">''</span>, <span class="number">202</span></div></pre></td></tr></table></figure>
<p>再看看introspect的具体实现：</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># introspect.py</span></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">introspect</span><span class="params">()</span>:</span></div><div class="line">    node_info = node_cache.add_node(node.uuid,</div><div class="line">                                    bmc_address=bmc_address,</div><div class="line">                                    ironic=ironic)</div><div class="line">    future = utils.executor().submit(_background_introspect, ironic, node_info)</div><div class="line">    ...</div></pre></td></tr></table></figure>
<p>introspect函数先是更新了ipmi信息，然后在inspector的node表里添加一条记录，另外在attributes表里添加bmc_address信息。最终后台调用_background_introspect做主机发现。</p>
<p>接着调用 _background_introspect_locked设置裸机从pxe启动，并重启裸机。</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># introspect.py</span></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">_background_introspect_locked</span><span class="params">(ironic, node_info)</span>:</span></div><div class="line">    <span class="keyword">try</span>:</div><div class="line">        ironic.node.set_boot_device(node_info.uuid, <span class="string">'pxe'</span>,</div><div class="line">                                    persistent=<span class="keyword">False</span>)</div><div class="line">    <span class="keyword">try</span>:</div><div class="line">        ironic.node.set_power_state(node_info.uuid, <span class="string">'reboot'</span>)</div></pre></td></tr></table></figure>
<p>我们在已经配置好了裸机，并在<code>/tftpboot/pxelinux.cfg/default</code>设置了如下信息：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">default introspect                                                                                                                                           </div><div class="line">label introspect</div><div class="line">kernel ironic-agent.vmlinuz</div><div class="line">append initrd=ironic-agent.initramfs ipa-inspection-callback-url=http://192.168.2.40:5050/v1/continue ipa-inspection-collectors=default,logs systemd.journald.forward_to_console=no</div><div class="line"></div><div class="line">ipappend 3</div></pre></td></tr></table></figure>
<h2 id="ipa阶段"><a href="#ipa阶段" class="headerlink" title="ipa阶段"></a>ipa阶段</h2><p>裸机从小系统启动之后，会启动ironic-python-agent服务。该服务会收集裸机的硬件信息，并发送到<code>ipa-inspection-callback-url</code>指定的url。</p>
<p>这里ipa发送的post数据内容包括：</p>
<figure class="highlight json"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div></pre></td><td class="code"><pre><div class="line">&#123;</div><div class="line">    <span class="attr">"boot_interface"</span>: <span class="string">"01-98-40-bb-81-37-5b"</span>,</div><div class="line">    <span class="attr">"ipmi_address"</span>: <span class="string">"10.43.200.161"</span>,</div><div class="line">    <span class="attr">"error"</span>: <span class="literal">null</span>,</div><div class="line">    <span class="attr">"root_disk"</span>: &#123;</div><div class="line">        <span class="attr">"name"</span>: <span class="string">"/dev/sda"</span>,</div><div class="line">        <span class="attr">"model"</span>: <span class="string">"PERC H730 Mini"</span>,</div><div class="line">        <span class="attr">"hctl"</span>: <span class="string">"0:2:0:0"</span>,</div><div class="line">        <span class="attr">"wwn_with_extension"</span>: <span class="string">"0x61866da06bc6e7001f920081106a8012"</span>,</div><div class="line">        <span class="attr">"wwn"</span>: <span class="string">"0x61866da06bc6e700"</span>,</div><div class="line">        <span class="attr">"vendor"</span>: <span class="string">"DELL"</span>,</div><div class="line">        <span class="attr">"size"</span>: <span class="number">299439751168</span>,</div><div class="line">        <span class="attr">"rotational"</span>: <span class="literal">true</span>,</div><div class="line">        <span class="attr">"wwn_vendor_extension"</span>: <span class="string">"0x1f920081106a8012"</span>,</div><div class="line">        <span class="attr">"serial"</span>: <span class="string">"61866da06bc6e7001f920081106a8012"</span></div><div class="line">    &#125;,</div><div class="line">    <span class="attr">"inventory"</span>: &#123;</div><div class="line">        <span class="attr">"bmc_address"</span>: <span class="string">"10.43.200.161"</span>,</div><div class="line">        <span class="attr">"interfaces"</span>: [</div><div class="line">            &#123;</div><div class="line">                <span class="attr">"name"</span>: <span class="string">"eno1"</span>,</div><div class="line">                <span class="attr">"vendor"</span>: <span class="string">"0x8086"</span>,</div><div class="line">                <span class="attr">"lldp"</span>: <span class="literal">null</span>,</div><div class="line">                <span class="attr">"ipv4_address"</span>: <span class="literal">null</span>,</div><div class="line">                <span class="attr">"mac_address"</span>: <span class="string">"98:40:bb:81:37:59"</span>,</div><div class="line">                <span class="attr">"has_carrier"</span>: <span class="literal">false</span>,</div><div class="line">                <span class="attr">"client_id"</span>: <span class="literal">null</span>,</div><div class="line">                <span class="attr">"product"</span>: <span class="string">"0x10f8"</span></div><div class="line">            &#125;,</div><div class="line">            &#123;</div><div class="line">                <span class="attr">"name"</span>: <span class="string">"eno2"</span>,</div><div class="line">                <span class="attr">"vendor"</span>: <span class="string">"0x8086"</span>,</div><div class="line">                <span class="attr">"lldp"</span>: <span class="literal">null</span>,</div><div class="line">                <span class="attr">"ipv4_address"</span>: <span class="string">"192.168.2.50"</span>,</div><div class="line">                <span class="attr">"mac_address"</span>: <span class="string">"98:40:bb:81:37:5b"</span>,</div><div class="line">                <span class="attr">"has_carrier"</span>: <span class="literal">true</span>,</div><div class="line">                <span class="attr">"client_id"</span>: <span class="literal">null</span>,</div><div class="line">                <span class="attr">"product"</span>: <span class="string">"0x10f8"</span></div><div class="line">            &#125;</div><div class="line">        ],</div><div class="line">        <span class="attr">"cpu"</span>: &#123;</div><div class="line">            <span class="attr">"count"</span>: <span class="number">48</span>,</div><div class="line">            <span class="attr">"frequency"</span>: <span class="string">"3100.0000"</span>,</div><div class="line">            <span class="attr">"model_name"</span>: <span class="string">"Intel(R) Xeon(R) CPU E5-2670 v3 @ 2.30GHz"</span>,</div><div class="line">            <span class="attr">"flags"</span>: [</div><div class="line">                <span class="string">"acpi"</span>,</div><div class="line">                <span class="string">"pts"</span></div><div class="line">            ],</div><div class="line">            <span class="attr">"architecture"</span>: <span class="string">"x86_64"</span></div><div class="line">        &#125;,</div><div class="line">        <span class="attr">"disks"</span>: [</div><div class="line">            &#123;</div><div class="line">                <span class="attr">"name"</span>: <span class="string">"/dev/sda"</span>,</div><div class="line">                <span class="attr">"model"</span>: <span class="string">"PERC H730 Mini"</span>,</div><div class="line">                <span class="attr">"hctl"</span>: <span class="string">"0:2:0:0"</span>,</div><div class="line">                <span class="attr">"wwn_with_extension"</span>: <span class="string">"0x61866da06bc6e7001f920081106a8012"</span>,</div><div class="line">                <span class="attr">"wwn"</span>: <span class="string">"0x61866da06bc6e700"</span>,</div><div class="line">                <span class="attr">"vendor"</span>: <span class="string">"DELL"</span>,</div><div class="line">                <span class="attr">"size"</span>: <span class="number">299439751168</span>,</div><div class="line">                <span class="attr">"rotational"</span>: <span class="literal">true</span>,</div><div class="line">                <span class="attr">"wwn_vendor_extension"</span>: <span class="string">"0x1f920081106a8012"</span>,</div><div class="line">                <span class="attr">"serial"</span>: <span class="string">"61866da06bc6e7001f920081106a8012"</span></div><div class="line">            &#125;</div><div class="line">        ],</div><div class="line">        <span class="attr">"boot"</span>: &#123;</div><div class="line">            <span class="attr">"current_boot_mode"</span>: <span class="string">"bios"</span>,</div><div class="line">            <span class="attr">"pxe_interface"</span>: <span class="string">"01-98-40-bb-81-37-5b"</span></div><div class="line">        &#125;,</div><div class="line">        <span class="attr">"system_vendor"</span>: &#123;</div><div class="line">            <span class="attr">"serial_number"</span>: <span class="string">"G032KG2"</span>,</div><div class="line">            <span class="attr">"product_name"</span>: <span class="string">"PowerEdge M630"</span>,</div><div class="line">            <span class="attr">"manufacturer"</span>: <span class="string">"Dell Inc."</span></div><div class="line">        &#125;,</div><div class="line">        <span class="attr">"memory"</span>: &#123;</div><div class="line">            <span class="attr">"physical_mb"</span>: <span class="number">131072</span>,</div><div class="line">            <span class="attr">"total"</span>: <span class="number">135082627072</span></div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="inspector主机上报阶段"><a href="#inspector主机上报阶段" class="headerlink" title="inspector主机上报阶段"></a>inspector主机上报阶段</h2><p>先看看inspector怎么处理ipa上报的数据：</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># main.py</span></div><div class="line"><span class="meta">@app.route('/v1/continue', methods=[post])</span></div><div class="line"><span class="meta">@convert_exceptions</span></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">api_continue</span><span class="params">()</span>:</span></div><div class="line">    data = flask.request.get_json(force=<span class="keyword">True</span>)</div><div class="line">    <span class="keyword">return</span> flask.jsonify(process.process(data))</div><div class="line"></div><div class="line"></div><div class="line"><span class="comment"># process.py</span></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">process</span><span class="params">(introspection_data)</span>:</span></div><div class="line">    <span class="string">"""Process data from the ramdisk.</span></div><div class="line">    </div><div class="line">    This function heavily relies on the hooks to do the actual data processing.</div><div class="line">    """</div><div class="line">    hooks = plugins_base.processing_hooks_manager()</div><div class="line">    failures = []</div><div class="line">    <span class="keyword">for</span> hook_ext <span class="keyword">in</span> hooks:</div><div class="line">        <span class="keyword">try</span>:</div><div class="line">            hook_ext.obj.before_processing(introspection_data)</div><div class="line">        <span class="keyword">except</span> utils.Error <span class="keyword">as</span> exc:</div><div class="line">            ...</div><div class="line">    <span class="comment"># 根据ipmi_address和macs获取inpsector node</span></div><div class="line">    node_info = _finde_node_info(introspection_data, failures)</div><div class="line">    <span class="keyword">try</span>:</div><div class="line">        node = node_info.node()</div><div class="line">        ...</div><div class="line">        </div><div class="line">    <span class="keyword">try</span>:</div><div class="line">        <span class="keyword">return</span> _process_node(node, introspection_data, node_info)</div></pre></td></tr></table></figure>
<p>我们可以看到这里数据是交由process出来，而process函数又调用各种钩子来出来ipa数据。接着根据ipmi_address查找对应的inspector node，再根据获取到的uuid来得到ironic node，交由_process_node()函数处理。</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># process.py</span></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">_process_node</span><span class="params">(node, introspection_data, node_info)</span>:</span></div><div class="line">    ir_utils.check_provision_state(node)</div><div class="line">    node_info.create_ports(introspection_data.get(<span class="string">'macs'</span>) <span class="keyword">or</span> ())</div><div class="line">    _run_post_hooks(node_inof, introspection_data)</div><div class="line">    </div><div class="line">    <span class="keyword">if</span> CONF.processing.store_data == <span class="string">'switf'</span>:</div><div class="line">        stored_data = &#123;k: v <span class="keyword">for</span> k, v <span class="keyword">in</span> introspection_data.items()</div><div class="line">                       <span class="keyword">if</span> k <span class="keyword">not</span> <span class="keyword">in</span> _STORAGE_EXCLUDE_KEYS&#125;</div><div class="line">        swift_object_name = switf.store.store_introspection_data(stored_data,</div><div class="line">                                                                 node_info.uuid)</div><div class="line">    ironic = ir_utils.get_client()</div><div class="line">    firewall.update_filters(ironic)</div><div class="line">    </div><div class="line">    node_info.invalidate_cache()</div><div class="line">    rules.apply(node_info, introspection_data)</div><div class="line">    ...</div><div class="line">    utils.executor().submit(_finish, ironic, node_info, introspection_data)</div><div class="line"></div><div class="line">    </div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">_finish</span><span class="params">(ironic, node_info, introspection_data)</span>:</span></div><div class="line">    <span class="keyword">try</span>:</div><div class="line">        ironic.node.set_power_state(node_info.uuid, <span class="string">'off'</span>)</div><div class="line">    node_info.finished()</div></pre></td></tr></table></figure>
<p>我们可以看到，如果配置了<code>store_data=swift</code>，inspector会把ipa上报的数据存储到swift中。最后的 node_info.finished()是删除inspector数据库中已完成的数据。</p>
]]></content>
      
        <categories>
            
            <category> openstack </category>
            
        </categories>
        
        
        <tags>
            
            <tag> ironic </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[mac mysql启动配置]]></title>
      <url>/2017/03/11/mac%E4%B8%8B%E5%90%AF%E5%8A%A8mysql/</url>
      <content type="html"><![CDATA[<p>mac下使用mysql有点蛋疼，每次都要找命令。可能不同版本或者安装方式mysql的位置不太一样，可以使用<code>locate mysql.server</code>查找一下。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"># start</div><div class="line">sudo /usr/local/bin/mysql.server start</div><div class="line"></div><div class="line"># stop</div><div class="line">sudo /usr/local/bin/mysql.server stop</div><div class="line"></div><div class="line"># restart</div><div class="line">sudo /usr/local/bin/mysql.server restart</div></pre></td></tr></table></figure>
<p>如果不想每次都敲这么一长串的命令，可以使用alias。在~/.bash_profile中添加：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">alias mysqlstart=&apos;sudo /usr/local/bin/mysql.server start&apos;</div><div class="line">alias mysqlstop=&apos;sudo /usr/local/bin/mysql.server stop&apos;</div></pre></td></tr></table></figure>]]></content>
      
        <categories>
            
            <category> mac </category>
            
        </categories>
        
        
        <tags>
            
            <tag> mysql </tag>
            
            <tag> mac </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[mac使用]]></title>
      <url>/2017/03/11/mac%E4%BD%BF%E7%94%A8/</url>
      <content type="html"><![CDATA[<h2 id="截图"><a href="#截图" class="headerlink" title="截图"></a>截图</h2><ul>
<li>全屏截图:<code>Command-Shift-3</code></li>
<li>指定区域截图:<code>Command-Shift-4</code></li>
</ul>
<h2 id="删除"><a href="#删除" class="headerlink" title="删除"></a>删除</h2><ul>
<li>删除文件:<code>Command-Del</code></li>
<li>清空废纸篓:<code>Shift-Command-Del</code></li>
</ul>
]]></content>
      
        <categories>
            
            <category> mac </category>
            
        </categories>
        
        
        <tags>
            
            <tag> mac </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[python ironic client使用]]></title>
      <url>/2017/03/11/python-ironic-client%E4%BD%BF%E7%94%A8/</url>
      <content type="html"><![CDATA[<h2 id="使用cli"><a href="#使用cli" class="headerlink" title="使用cli"></a>使用cli</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">from</span> ironicclient <span class="keyword">import</span> client</div><div class="line">kwargs = &#123;<span class="string">'os_username'</span>: <span class="string">'ironic'</span>,</div><div class="line">          <span class="string">'os_password'</span>: <span class="string">'IRONIC_PASSWORD'</span>,</div><div class="line">          <span class="string">'os_auth_url'</span>: <span class="string">'http://192.168.1.72:5000/'</span>,</div><div class="line">          <span class="string">'os_tenant_name'</span>: <span class="string">'services'</span>&#125;</div><div class="line"></div><div class="line">ironic = client.get_client(<span class="number">1</span>, **kwargs)</div><div class="line"></div><div class="line"><span class="keyword">print</span> ironic.node.list()                                                                                                                                   </div><div class="line"><span class="keyword">print</span> ironic.driver.list()</div></pre></td></tr></table></figure>
<p>上面的os_username和os_password是ironic的账号，而不是keystone的账号。</p>
<p>ironicclient是一个cli工具，用来和用户交互的。首先写一个简单的例子，获取ironic所有的node节点：</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">from</span> ironicclient <span class="keyword">import</span> client</div><div class="line"></div><div class="line"></div><div class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</div><div class="line">    kwargs = &#123;<span class="string">'os_username'</span>: <span class="string">'ironic'</span>,</div><div class="line">              <span class="string">'os_password'</span>: <span class="string">'IRONIC_PASSWORD'</span>,</div><div class="line">              <span class="string">'os_auth_url'</span>: <span class="string">'http://192.168.1.72:5000/'</span>,</div><div class="line">              <span class="string">'os_tenant_name'</span>: <span class="string">'services'</span>&#125;</div><div class="line">    ironic = client.get_client(<span class="number">1</span>, **kwargs)</div><div class="line">    <span class="keyword">print</span> ironic.node.list()</div></pre></td></tr></table></figure>
<p>这里我们创建了一个client对象，这个对象是通过client类的get_client方法返回的，这是一个工厂模式，下面看下get_client方法：</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_client</span><span class="params">(api_version, os_auth_token=None, ironic_url=None,</span></span></div><div class="line">               os_username=None, os_password=None, os_auth_url=None,</div><div class="line">               os_project_id=None, os_project_name=None, os_tenant_id=None,</div><div class="line">               os_tenant_name=None, os_region_name=None,</div><div class="line">               os_user_domain_id=None, os_user_domain_name=None,</div><div class="line">               os_project_domain_id=None, os_project_domain_name=None,</div><div class="line">               os_service_type=None, os_endpoint_type=None,</div><div class="line">               insecure=None, timeout=None, os_cacert=None, ca_file=None,</div><div class="line">               os_cert=None, cert_file=None, os_key=None, key_file=None,</div><div class="line">               os_ironic_api_version=None, max_retries=None,</div><div class="line">               retry_interval=None, session=None, **ignored_kwargs):</div><div class="line">    os_service_type = os_service_type <span class="keyword">or</span> <span class="string">'baremetal'</span></div><div class="line">    os_endpoint_type = os_endpoint_type <span class="keyword">or</span> <span class="string">'publicURL'</span></div><div class="line">    project_id = (os_project_id <span class="keyword">or</span> os_tenant_id)</div><div class="line">    project_name = (os_project_name <span class="keyword">or</span> os_tenant_name)</div><div class="line">    kwargs = &#123;</div><div class="line">        <span class="string">'os_ironic_api_version'</span>: os_ironic_api_version,</div><div class="line">        <span class="string">'max_retries'</span>: max_retries,</div><div class="line">        <span class="string">'retry_interval'</span>: retry_interval,</div><div class="line">    &#125;</div><div class="line">    endpoint = ironic_url</div><div class="line">    cacert = os_cacert <span class="keyword">or</span> ca_file</div><div class="line">    cert = os_cert <span class="keyword">or</span> cert_file</div><div class="line">    key = os_key <span class="keyword">or</span> key_file</div><div class="line">    <span class="keyword">if</span> os_auth_token <span class="keyword">and</span> endpoint:</div><div class="line">        kwargs.update(&#123;</div><div class="line">            <span class="string">'token'</span>: os_auth_token,</div><div class="line">            <span class="string">'insecure'</span>: insecure,</div><div class="line">            <span class="string">'ca_file'</span>: cacert,</div><div class="line">            <span class="string">'cert_file'</span>: cert,</div><div class="line">            <span class="string">'key_file'</span>: key,</div><div class="line">            <span class="string">'timeout'</span>: timeout,</div><div class="line">        &#125;)</div><div class="line">    <span class="keyword">elif</span> os_auth_url:</div><div class="line">        auth_type = <span class="string">'password'</span></div><div class="line">        auth_kwargs = &#123;</div><div class="line">            <span class="string">'auth_url'</span>: os_auth_url,</div><div class="line">            <span class="string">'project_id'</span>: project_id,</div><div class="line">            <span class="string">'project_name'</span>: project_name,</div><div class="line">            <span class="string">'user_domain_id'</span>: os_user_domain_id,</div><div class="line">            <span class="string">'user_domain_name'</span>: os_user_domain_name,</div><div class="line">            <span class="string">'project_domain_id'</span>: os_project_domain_id,</div><div class="line">            <span class="string">'project_domain_name'</span>: os_project_domain_name,</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">if</span> os_username <span class="keyword">and</span> os_password:</div><div class="line">            auth_kwargs.update(&#123;</div><div class="line">                <span class="string">'username'</span>: os_username,</div><div class="line">                <span class="string">'password'</span>: os_password,</div><div class="line">            &#125;)</div><div class="line">        <span class="keyword">elif</span> os_auth_token:</div><div class="line">            auth_type = <span class="string">'token'</span></div><div class="line">            auth_kwargs.update(&#123;</div><div class="line">                <span class="string">'token'</span>: os_auth_token,</div><div class="line">            &#125;)</div><div class="line">        <span class="comment"># Create new session only if it was not passed in</span></div><div class="line">        <span class="keyword">if</span> <span class="keyword">not</span> session:</div><div class="line">            loader = kaloading.get_plugin_loader(auth_type)</div><div class="line">            auth_plugin = loader.load_from_options(**auth_kwargs)</div><div class="line">            <span class="comment"># Let keystoneauth do the necessary parameter conversions</span></div><div class="line">            session = kaloading.session.Session().load_from_options(</div><div class="line">                auth=auth_plugin, insecure=insecure, cacert=cacert,</div><div class="line">                cert=cert, key=key, timeout=timeout,</div><div class="line">            )</div><div class="line"></div><div class="line">    exception_msg = _(<span class="string">'Must provide Keystone credentials or user-defined '</span></div><div class="line">                      <span class="string">'endpoint and token'</span>)</div><div class="line">    <span class="keyword">if</span> <span class="keyword">not</span> endpoint:</div><div class="line">        <span class="keyword">if</span> session:</div><div class="line">            <span class="keyword">try</span>:</div><div class="line">                <span class="comment"># Pass the endpoint, it will be used to get hostname</span></div><div class="line">                <span class="comment"># and port that will be used for API version caching. It will</span></div><div class="line">                <span class="comment"># be also set as endpoint_override.</span></div><div class="line">                endpoint = session.get_endpoint(</div><div class="line">                    service_type=os_service_type,</div><div class="line">                    interface=os_endpoint_type,</div><div class="line">                    region_name=os_region_name</div><div class="line">                )</div><div class="line">            <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</div><div class="line">                <span class="keyword">raise</span> exc.AmbiguousAuthSystem(</div><div class="line">                    exception_msg + _(<span class="string">', error was: %s'</span>) % e)</div><div class="line">        <span class="keyword">else</span>:</div><div class="line">            <span class="comment"># Neither session, nor valid auth parameters provided</span></div><div class="line">            <span class="keyword">raise</span> exc.AmbiguousAuthSystem(exception_msg)</div><div class="line"></div><div class="line">    <span class="comment"># Always pass the session</span></div><div class="line">    kwargs[<span class="string">'session'</span>] = session</div><div class="line"></div><div class="line">    <span class="keyword">return</span> Client(api_version, endpoint, **kwargs)</div></pre></td></tr></table></figure>
<p>中间这一大串可以先不看，主要是认证的一些信息。在get_cleint函数结尾，调用了Client() 方法作为返回值。这里传入了三个参数：</p>
<ul>
<li>api_version</li>
<li>endpoint</li>
<li>**kwargs</li>
</ul>
<p>其中api_version是1，endpoint是<a href="http://192.168.1.72:6385，kwargs保存了session的信息：" target="_blank" rel="external">http://192.168.1.72:6385，kwargs保存了session的信息：</a></p>
<p><code>{&#39;os_ironic_api_version&#39;: None, &#39;session&#39;: &lt;keystoneauth1.session.Session object at 0x2441690&gt;, &#39;retry_interval&#39;: None, &#39;max_retries&#39;: None}</code></p>
<p>我们再来看看Client()方法的具体实现：</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">Client</span><span class="params">(version, *args, **kwargs)</span>:</span></div><div class="line">    module = utils.import_versioned_module(version, <span class="string">'client'</span>)</div><div class="line">    client_class = getattr(module, <span class="string">'Client'</span>)</div><div class="line">    <span class="keyword">return</span> client_class(*args, **kwargs)</div></pre></td></tr></table></figure>
<p>这里module内容如下：<br><code>&lt;module &#39;ironicclient.v1.client&#39; from &#39;/usr/lib/python2.7/site-packages/ironicclient/v1/client.pyc&#39;&gt;</code></p>
<p>后面的client_class使用反射的机制来获取Client类。简单的说就是调用文件<br><code>/usr/lib/python2.7/site-packages/ironicclient/v1/client.py</code>中的Client类，并返回其对象。再来看下Client类的具体实现：</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Client</span><span class="params">(object)</span>:</span></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, *args, **kwargs)</span>:</span></div><div class="line">        <span class="string">"""Initialize a new client for the Ironic v1 API."""</span></div><div class="line">        <span class="keyword">if</span> kwargs.get(<span class="string">'os_ironic_api_version'</span>):</div><div class="line">            kwargs[<span class="string">'api_version_select_state'</span>] = <span class="string">"user"</span></div><div class="line">        <span class="keyword">else</span>:</div><div class="line">            <span class="comment"># If the user didn't specify a version, use a cached version if</span></div><div class="line">            <span class="comment"># one has been stored</span></div><div class="line">            host, netport = http.get_server(args[<span class="number">0</span>])</div><div class="line">            saved_version = filecache.retrieve_data(host=host, port=netport)</div><div class="line">            <span class="keyword">if</span> saved_version:</div><div class="line">                kwargs[<span class="string">'api_version_select_state'</span>] = <span class="string">"cached"</span></div><div class="line">                kwargs[<span class="string">'os_ironic_api_version'</span>] = saved_version</div><div class="line">            <span class="keyword">else</span>:</div><div class="line">                kwargs[<span class="string">'api_version_select_state'</span>] = <span class="string">"default"</span></div><div class="line">                kwargs[<span class="string">'os_ironic_api_version'</span>] = DEFAULT_VER</div><div class="line"></div><div class="line">        self.http_client = http._construct_http_client(*args, **kwargs)</div><div class="line"></div><div class="line">        self.chassis = chassis.ChassisManager(self.http_client)</div><div class="line">        self.node = node.NodeManager(self.http_client)</div><div class="line">        self.port = port.PortManager(self.http_client)</div><div class="line">        self.driver = driver.DriverManager(self.http_client)</div></pre></td></tr></table></figure>
<p>可以看出Client类的chassis，node，port，driver属性都是对应类的manager。先看看NodeManager的实现：</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">NodeManager</span><span class="params">(base.CreateManager)</span>:</span></div><div class="line">    resource_class = Node</div><div class="line">    _creation_attributes = [<span class="string">'chassis_uuid'</span>, <span class="string">'driver'</span>, <span class="string">'driver_info'</span>,</div><div class="line">                            <span class="string">'extra'</span>, <span class="string">'uuid'</span>, <span class="string">'properties'</span>, <span class="string">'name'</span>]</div><div class="line">    _resource_name = <span class="string">'nodes'</span></div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">list</span><span class="params">(self, associated=None, maintenance=None, marker=None, limit=None,</span></span></div><div class="line">             detail=False, sort_key=None, sort_dir=None, fields=None,</div><div class="line">             provision_state=None, driver=None):</div><div class="line">        <span class="keyword">if</span> limit <span class="keyword">is</span> <span class="keyword">not</span> <span class="keyword">None</span>:</div><div class="line">            limit = int(limit)</div><div class="line"></div><div class="line">        <span class="keyword">if</span> detail <span class="keyword">and</span> fields:</div><div class="line">            <span class="keyword">raise</span> exc.InvalidAttribute(_(<span class="string">"Can't fetch a subset of fields "</span></div><div class="line">                                         <span class="string">"with 'detail' set"</span>))</div><div class="line"></div><div class="line">        filters = utils.common_filters(marker, limit, sort_key, sort_dir,</div><div class="line">                                       fields)</div><div class="line">        <span class="keyword">if</span> associated <span class="keyword">is</span> <span class="keyword">not</span> <span class="keyword">None</span>:</div><div class="line">            filters.append(<span class="string">'associated=%s'</span> % associated)</div><div class="line">        <span class="keyword">if</span> maintenance <span class="keyword">is</span> <span class="keyword">not</span> <span class="keyword">None</span>:</div><div class="line">            filters.append(<span class="string">'maintenance=%s'</span> % maintenance)</div><div class="line">        <span class="keyword">if</span> provision_state <span class="keyword">is</span> <span class="keyword">not</span> <span class="keyword">None</span>:</div><div class="line">            filters.append(<span class="string">'provision_state=%s'</span> % provision_state)</div><div class="line">        <span class="keyword">if</span> driver <span class="keyword">is</span> <span class="keyword">not</span> <span class="keyword">None</span>:</div><div class="line">            filters.append(<span class="string">'driver=%s'</span> % driver)</div><div class="line"></div><div class="line">        path = <span class="string">''</span></div><div class="line">        <span class="keyword">if</span> detail:</div><div class="line">            path += <span class="string">'detail'</span></div><div class="line">        <span class="keyword">if</span> filters:</div><div class="line">            path += <span class="string">'?'</span> + <span class="string">'&amp;'</span>.join(filters)</div><div class="line"></div><div class="line">        <span class="keyword">if</span> limit <span class="keyword">is</span> <span class="keyword">None</span>:</div><div class="line">            <span class="keyword">return</span> self._list(self._path(path), <span class="string">"nodes"</span>)</div><div class="line">        <span class="keyword">else</span>:</div><div class="line">            <span class="keyword">return</span> self._list_pagination(self._path(path), <span class="string">"nodes"</span>,</div><div class="line">                                         limit=limit)</div><div class="line">...</div></pre></td></tr></table></figure>
<p>我们看list方法，前面是一些过滤条件，因为我们没有穿limit参数，所有limit是None,然后调用了_list()方法。这个是在父类里定义的。实现代码在：<code>/usr/lib/python2.7/site-packages/ironicclient/common/base.py</code></p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">_list</span><span class="params">(self, url, response_key=None, obj_class=None, body=None)</span>:</span></div><div class="line">    resp, body = self.api.json_request(<span class="string">'GET'</span>, url)</div><div class="line"></div><div class="line">    <span class="keyword">if</span> obj_class <span class="keyword">is</span> <span class="keyword">None</span>:</div><div class="line">        obj_class = self.resource_class</div><div class="line"></div><div class="line">    data = self._format_body_data(body, response_key)</div><div class="line">    <span class="keyword">return</span> [obj_class(self, res, loaded=<span class="keyword">True</span>) <span class="keyword">for</span> res <span class="keyword">in</span> data <span class="keyword">if</span> res]</div></pre></td></tr></table></figure>
<p>我们可以看到，这里是发送了HTTP GET请求，然就将收到的数据格式化并返回。这里的api是我们在前面传入的，使用http创建的一个client对象。</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">self.http_client = http._construct_http_client(*args, **kwargs)</div><div class="line">...</div><div class="line"></div><div class="line">self.node = node.NodeManager(self.http_client)</div></pre></td></tr></table></figure>]]></content>
      
        <categories>
            
            <category> openstack </category>
            
        </categories>
        
        
        <tags>
            
            <tag> ironic </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[python测试框架nose使用]]></title>
      <url>/2017/03/11/nose%E4%BD%BF%E7%94%A8/</url>
      <content type="html"><![CDATA[<h1 id="使用nose进行单元测试"><a href="#使用nose进行单元测试" class="headerlink" title="使用nose进行单元测试"></a>使用nose进行单元测试</h1><h2 id="nose安装"><a href="#nose安装" class="headerlink" title="nose安装"></a>nose安装</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">pip install nose</div></pre></td></tr></table></figure>
<h2 id="Example"><a href="#Example" class="headerlink" title="Example"></a>Example</h2><p>例如我们在multiply.py文件中有如下一段代码:</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">multiply</span><span class="params">(x, y)</span>:</span></div><div class="line">    <span class="keyword">return</span> x * y</div></pre></td></tr></table></figure>
<p>为了测试上面的代码，我们添加test_multiply.py，编写如下内容：</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">from</span> multiply <span class="keyword">import</span> multiply</div><div class="line"></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">test_number_3_4</span><span class="params">()</span>:</span></div><div class="line">    <span class="keyword">assert</span> multiply(<span class="number">3</span>, <span class="number">4</span>) == <span class="number">12</span></div><div class="line"></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">test_strings_a_3</span><span class="params">()</span>:</span></div><div class="line">    <span class="keyword">assert</span> multiply(<span class="string">'a'</span>, <span class="number">3</span>) == <span class="string">'aaa'</span></div></pre></td></tr></table></figure>
<p>运行<code>nosetests</code>,打印结果如下：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">yl@lee:~/code/py/project$ nosetests</div><div class="line">..</div><div class="line">----------------------------------------------------------------------</div><div class="line">Ran 2 tests in 0.001s</div><div class="line"></div><div class="line">OK</div></pre></td></tr></table></figure>
<p>如果要查看详细信息我们可以添加-v参数：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">yl@lee:~/code/py/project$ nosetests -v</div><div class="line">multiply_test.test_number_3_4 ... ok</div><div class="line">multiply_test.test_strings_a_3 ... ok</div><div class="line"></div><div class="line">----------------------------------------------------------------------</div><div class="line">Ran 2 tests in 0.001s</div><div class="line"></div><div class="line">OK</div></pre></td></tr></table></figure>
<p>nose会自动匹配test用例，匹配规则是：满足<code>(?:^|[b_.-])[Tt]est</code>的类，函数，目录，方法。</p>
<h2 id="nose-fixtures"><a href="#nose-fixtures" class="headerlink" title="nose fixtures"></a>nose fixtures</h2><p>在测试一组用例的时候，有些初始化或结束代码是通用的，我们可以把这部分代码提取出来，放到setup和teardown中。</p>
<ul>
<li>在module生效，使用setup_module/teardown_module</li>
<li>在class生效，使用setup_class/teardown_class，并添加<code>@classmethod</code>装饰器</li>
<li>function使用setup_function/teardown_function,并添加<code>@with_setup</code>装饰器</li>
</ul>
<p><strong>备注</strong></p>
<ul>
<li>setup_module(): 在文件中最早执行</li>
<li>teardown_module(): 在文件中最后执行</li>
<li>setup()在类所有方之前执行</li>
<li>teardown()在类所有方法之后执行</li>
<li>setup_class()在类每个方法开始时执行</li>
<li>teardown_class()在类每个方法最后执行</li>
</ul>
<p>具体例子如下：</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">from</span> nose <span class="keyword">import</span> with_setup <span class="comment"># optional</span></div><div class="line"><span class="keyword">from</span> unnecessary_math <span class="keyword">import</span> multiply</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">setup_module</span><span class="params">(module)</span>:</span></div><div class="line">    <span class="keyword">print</span> (<span class="string">""</span>) <span class="comment"># this is to get a newline after the dots</span></div><div class="line">    <span class="keyword">print</span> (<span class="string">"setup_module before anything in this file"</span>)</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">teardown_module</span><span class="params">(module)</span>:</span></div><div class="line">    <span class="keyword">print</span> (<span class="string">"teardown_module after everything in this file"</span>)</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">my_setup_function</span><span class="params">()</span>:</span></div><div class="line">    <span class="keyword">print</span> (<span class="string">"my_setup_function"</span>)</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">my_teardown_function</span><span class="params">()</span>:</span></div><div class="line">    <span class="keyword">print</span> (<span class="string">"my_teardown_function"</span>)</div><div class="line"></div><div class="line"><span class="meta">@with_setup(my_setup_function, my_teardown_function)</span></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">test_numbers_3_4</span><span class="params">()</span>:</span></div><div class="line">    <span class="keyword">print</span> <span class="string">'test_numbers_3_4  &lt;============================ actual test code'</span></div><div class="line">    <span class="keyword">assert</span> multiply(<span class="number">3</span>,<span class="number">4</span>) == <span class="number">12</span></div><div class="line"></div><div class="line"><span class="meta">@with_setup(my_setup_function, my_teardown_function)</span></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">test_strings_a_3</span><span class="params">()</span>:</span></div><div class="line">    <span class="keyword">print</span> <span class="string">'test_strings_a_3  &lt;============================ actual test code'</span></div><div class="line">    <span class="keyword">assert</span> multiply(<span class="string">'a'</span>,<span class="number">3</span>) == <span class="string">'aaa'</span></div><div class="line"></div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">TestUM</span>:</span></div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">setup</span><span class="params">(self)</span>:</span></div><div class="line">        <span class="keyword">print</span> (<span class="string">"TestUM:setup() before each test method"</span>)</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">teardown</span><span class="params">(self)</span>:</span></div><div class="line">        <span class="keyword">print</span> (<span class="string">"TestUM:teardown() after each test method"</span>)</div><div class="line"></div><div class="line"><span class="meta">    @classmethod</span></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">setup_class</span><span class="params">(cls)</span>:</span></div><div class="line">        <span class="keyword">print</span> (<span class="string">"setup_class() before any methods in this class"</span>)</div><div class="line"></div><div class="line"><span class="meta">    @classmethod</span></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">teardown_class</span><span class="params">(cls)</span>:</span></div><div class="line">        <span class="keyword">print</span> (<span class="string">"teardown_class() after any methods in this class"</span>)</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">test_numbers_5_6</span><span class="params">(self)</span>:</span></div><div class="line">        <span class="keyword">print</span> <span class="string">'test_numbers_5_6()  &lt;============================ actual test code'</span></div><div class="line">        <span class="keyword">assert</span> multiply(<span class="number">5</span>,<span class="number">6</span>) == <span class="number">30</span></div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">test_strings_b_2</span><span class="params">(self)</span>:</span></div><div class="line">        <span class="keyword">print</span> <span class="string">'test_strings_b_2()  &lt;============================ actual test code'</span></div><div class="line">        <span class="keyword">assert</span> multiply(<span class="string">'b'</span>,<span class="number">2</span>) == <span class="string">'bb'</span></div></pre></td></tr></table></figure>
<p>默认情况下nose不会打印程序的输出，加上<code>-s</code>参数可以打印输出</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div></pre></td><td class="code"><pre><div class="line">yl@lee:~/code/py/project$ nosetests -v -s</div><div class="line"></div><div class="line">setup_module before anything in this file</div><div class="line">setup_class() before any methods in this class</div><div class="line">multiply_test.TestUM.test_numbers_5_6 ... TestUM:setup() before each test method</div><div class="line">test_numbers_5_6()  &lt;============================ actual test code</div><div class="line">TestUM:teardown() after each test method</div><div class="line">ok</div><div class="line">multiply_test.TestUM.test_strings_b_2 ... TestUM:setup() before each test method</div><div class="line">test_strings_b_2()  &lt;============================ actual test code</div><div class="line">TestUM:teardown() after each test method</div><div class="line">ok</div><div class="line">teardown_class() after any methods in this class</div><div class="line">multiply_test.test_numbers_3_4 ... my_setup_function</div><div class="line">test_numbers_3_4  &lt;============================ actual test code</div><div class="line">my_teardown_function</div><div class="line">ok</div><div class="line">multiply_test.test_strings_a_3 ... my_setup_function</div><div class="line">test_strings_a_3  &lt;============================ actual test code</div><div class="line">my_teardown_function</div><div class="line">ok</div><div class="line">teardown_module after everything in this file</div><div class="line"></div><div class="line">----------------------------------------------------------------------</div><div class="line">Ran 4 tests in 0.002s</div><div class="line"></div><div class="line">OK</div></pre></td></tr></table></figure>
<h2 id="使用nose-assert语句"><a href="#使用nose-assert语句" class="headerlink" title="使用nose assert语句"></a>使用nose assert语句</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">from</span> nose.tools <span class="keyword">import</span> assert_equals</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">test_numbers_3_4</span><span class="params">()</span>:</span></div><div class="line">    assert_equals(multiply(<span class="number">3</span>,<span class="number">4</span>), <span class="number">12</span>)</div></pre></td></tr></table></figure>
<p>常用assert语句如下：</p>
<ul>
<li>assert_almost_equal(first, second, places=7, msg=None)</li>
<li>assert_almost_equals</li>
<li>assert_not_almost_equal</li>
<li>assert_not_almost_equals</li>
<li>assert_equal(first, second, place=7, msg=None)</li>
<li>assert_equals</li>
<li>assert_false</li>
<li>assert_true</li>
<li>assert_not_equal</li>
<li>assert_not_equals</li>
<li>eq_</li>
<li>ok_</li>
</ul>
<h2 id="异常处理"><a href="#异常处理" class="headerlink" title="异常处理"></a>异常处理</h2><p>有时候我们会在程序的某些地方抛异常，对于这种情况，需要使用@raises装饰器处理。</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">play</span><span class="params">()</span>:</span></div><div class="line">    sys.exit(<span class="number">1</span>)</div><div class="line"></div><div class="line"><span class="keyword">from</span> nose.tools <span class="keyword">import</span> raises</div><div class="line"><span class="meta">@raises(SystemExit)</span></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">test_play_except</span><span class="params">()</span>:</span></div><div class="line">    play()</div></pre></td></tr></table></figure>
<h2 id="常用参数"><a href="#常用参数" class="headerlink" title="常用参数"></a>常用参数</h2><ul>
<li>nosetests -v： debug模式，看到具体执行情况，推荐使用；</li>
<li>nose会捕获标准输出，程序中的print不会打印到出来，使用nosetests -s可以打开output输出；</li>
<li>默认nosetests会执行所有的test case，如果想单独执行一个case，执行nosetests –tests后跟要测试的文件；</li>
<li>nosetests –pdb-failures:失败时，立马调试。这个选项很赞，可以看到失败时的及时环境；</li>
<li>nosetests –collect-only -v: 不运行程序，只是搜集并输出各个case的名称；</li>
<li>nosetests -x:一旦case失败，立即停止，不执行后续case;</li>
<li>nosetestx -failed:只执行上一轮失败的case;</li>
</ul>
<h2 id="命名规范"><a href="#命名规范" class="headerlink" title="命名规范"></a>命名规范</h2><ul>
<li>module使用 ‘test_’开头</li>
<li>fucntion使用 ‘tets_’开头</li>
<li>class使用 ‘Test’开头</li>
<li>method使用’test_’开头</li>
<li>测试代码的package里有’init.py’</li>
</ul>
<h2 id="获取nose返回值"><a href="#获取nose返回值" class="headerlink" title="获取nose返回值"></a>获取nose返回值</h2><ul>
<li><p>shell<br>在shell下执行时，如果全部用例都通过，则返回0，有failed或error则返回1。</p>
</li>
<li><p>python<br>在python代码中调用nose.run()函数，如果全部用例都通过，返回True，有failed或error返回False。</p>
</li>
</ul>
<p>默认情况下，nose会屏蔽所有输出，如果要打开调试信息可以通过如下方式：</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">result = nose.run(defaultTest=<span class="string">""</span>, argv=[<span class="string">''</span>, <span class="string">'--nocapture'</span>])</div></pre></td></tr></table></figure>]]></content>
      
        <categories>
            
            <category> python </category>
            
        </categories>
        
        
        <tags>
            
            <tag> python </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[python with语句]]></title>
      <url>/2017/03/11/python%20with%E8%AF%AD%E5%8F%A5/</url>
      <content type="html"><![CDATA[<h1 id="python-with语句"><a href="#python-with语句" class="headerlink" title="python with语句"></a>python with语句</h1><p>with 语句是用来替代try-except-finall语句的，使代码更加简洁。with语句的基本语法如下：</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">with</span> context [<span class="keyword">as</span> var]:</div><div class="line">    with_suite</div></pre></td></tr></table></figure>
<p>context表达式返回的是一个对象，var用来保存context返回的对象，可以是单个返回值，也可以是元组。</p>
<p>with 语句的实质是上下文管理。</p>
<ol>
<li>上下文管理协议：包含方法：<code>__enter__()</code>和<code>__exit__()</code>，支持该协议的对象要实现这两个方法。</li>
<li>上下文管理器：定义执行with语句时要建立的运行时上下文，负责执行with语句块上下文中的进入与退出操作。</li>
</ol>
<p>with虽然可以</p>
]]></content>
      
        <categories>
            
            <category> python </category>
            
        </categories>
        
        
        <tags>
            
            <tag> python </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[leetcode Add Two Numbers]]></title>
      <url>/2016/09/11/leetcode-002/</url>
      <content type="html"><![CDATA[<h2 id="题目："><a href="#题目：" class="headerlink" title="题目："></a>题目：</h2><p>You are given two linked lists representing two non-negative numbers.The digits are stored in reverse order and each of their nodes contain a single digit. Add the two numbers and return it as a linked list.</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">Input: (2 -&gt; 4 -&gt; 3) + (5 -&gt; 6 -&gt; 4)</div><div class="line">Output: 7 -&gt; 0 -&gt; 8</div></pre></td></tr></table></figure>
<h2 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h2><p>这一题比较简单，因为链表的第一位就是数字的个位，依次将每一位相加即可以，需要考虑进位的情况。</p>
<hr>
<p><strong>编程时注意以下几点：</strong></p>
<ol>
<li>每次计算完，记得l = l.Next</li>
<li>使用head指针，最后返回head.Next</li>
<li>所有加完了要判断进位大小</li>
</ol>
<figure class="highlight go"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line"> * Definition for singly-linked list.</div><div class="line"> * type ListNode struct &#123;</div><div class="line"> *     Val int</div><div class="line"> *     Next *ListNode</div><div class="line"> * &#125;</div><div class="line"> */</div><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">addTwoNumbers</span><span class="params">(l1 *ListNode, l2 *ListNode)</span> *<span class="title">ListNode</span></span> &#123;</div><div class="line">    sumNode := &amp;ListNode&#123;<span class="number">0</span>, <span class="literal">nil</span>&#125;</div><div class="line">    p := sumNode</div><div class="line">    <span class="keyword">var</span> carry <span class="keyword">int</span> = <span class="number">0</span></div><div class="line"></div><div class="line">    <span class="keyword">for</span> &#123;</div><div class="line">        <span class="keyword">if</span> l1 != <span class="literal">nil</span> &amp;&amp; l2 != <span class="literal">nil</span> &#123;</div><div class="line">            sum := l1.Val + l2.Val + carry</div><div class="line">            p.Next = &amp;ListNode&#123;sum % <span class="number">10</span>, <span class="literal">nil</span>&#125;</div><div class="line">            p = p.Next</div><div class="line">            l1 = l1.Next</div><div class="line">            l2 = l2.Next</div><div class="line">            carry = sum / <span class="number">10</span></div><div class="line">        &#125; <span class="keyword">else</span> &#123;</div><div class="line">            <span class="keyword">break</span></div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">for</span> &#123;</div><div class="line">        <span class="keyword">if</span> l1 != <span class="literal">nil</span> &#123;</div><div class="line">            sum := l1.Val + carry</div><div class="line">            p.Next = &amp;ListNode&#123;sum % <span class="number">10</span>, <span class="literal">nil</span>&#125;</div><div class="line">            p = p.Next</div><div class="line">            l1 = l1.Next</div><div class="line">            carry = sum / <span class="number">10</span></div><div class="line">        &#125; <span class="keyword">else</span> &#123;</div><div class="line">            <span class="keyword">break</span></div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">for</span> &#123;</div><div class="line">        <span class="keyword">if</span> l2 != <span class="literal">nil</span> &#123;</div><div class="line">            sum := l2.Val + carry</div><div class="line">            p.Next = &amp;ListNode&#123;sum % <span class="number">10</span>, <span class="literal">nil</span>&#125;</div><div class="line">            p = p.Next</div><div class="line">            l2 = l2.Next</div><div class="line">            carry = sum / <span class="number">10</span></div><div class="line">        &#125; <span class="keyword">else</span> &#123;</div><div class="line">            <span class="keyword">break</span></div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">if</span> carry != <span class="number">0</span> &#123;</div><div class="line">        p.Next = &amp;ListNode&#123;carry, <span class="literal">nil</span>&#125;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> sumNode.Next</div><div class="line">&#125;</div></pre></td></tr></table></figure>]]></content>
      
        <categories>
            
            <category> algorithm </category>
            
        </categories>
        
        
        <tags>
            
            <tag> leetcode </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[task_manager]]></title>
      <url>/2016/09/07/ironic-task_manager%E5%88%86%E6%9E%90/</url>
      <content type="html"><![CDATA[<h2 id="task-manager分析"><a href="#task-manager分析" class="headerlink" title="task_manager分析"></a>task_manager分析</h2><p>TaskManager暴露如下属性和资源：</p>
<ul>
<li><p>task.context</p>
<p>​    传给TaskManager的context</p>
</li>
<li><p>task.shared</p>
<p>​    如果Node locked返回False，否则返回True</p>
</li>
<li><p>task.node</p>
</li>
<li><p>task.ports</p>
</li>
<li><p>task.volume_connectors</p>
</li>
<li><p>task.volume_targets</p>
</li>
<li><p>task.driver</p>
</li>
</ul>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">require_exclusive_lock</span><span class="params">(f)</span>:</span></div><div class="line"></div><div class="line"><span class="meta">    @six.wraps(f)</span></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">wrapper</span><span class="params">(*args, **kwargs)</span>:</span></div><div class="line">        <span class="comment"># 这里这么写是测试的时候会用到Mock</span></div><div class="line">        <span class="keyword">if</span> len(args) &gt; <span class="number">1</span>:</div><div class="line">            task = args[<span class="number">1</span>] <span class="keyword">if</span> isinstance(args[<span class="number">1</span>], TaskManager) <span class="keyword">else</span> args[<span class="number">0</span>]</div><div class="line">        <span class="keyword">else</span>:</div><div class="line">            task = args[<span class="number">0</span>]</div><div class="line">        <span class="keyword">if</span> task.shared:</div><div class="line">            <span class="keyword">raise</span> exception.ExclusiveLockRequired()</div><div class="line">            </div><div class="line">        task.context.ensure_thread_contain_context()</div><div class="line">        <span class="keyword">return</span> f(*args, **kwargs)</div><div class="line">    <span class="keyword">return</span> wrapper</div></pre></td></tr></table></figure>
<p>创建TaskManager</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">acquire</span><span class="params">(context, node_id, shared=False, driver_name=None,</span></span></div><div class="line">            purpose=<span class="string">'unspecified action'</span>):</div><div class="line"></div><div class="line">    <span class="comment"># NOTE(lintan): This is a workaround to set the context of periodic tasks.</span></div><div class="line">    context.ensure_thread_contain_context()</div><div class="line">    <span class="keyword">return</span> TaskManager(context, node_id, shared=shared,</div><div class="line">                       driver_name=driver_name, purpose=purpose)</div></pre></td></tr></table></figure>
]]></content>
      
        <categories>
            
            <category> algorithm </category>
            
        </categories>
        
        
        <tags>
            
            <tag> leetcode </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[openstack代码提交]]></title>
      <url>/2016/09/07/%E5%90%91%E7%A4%BE%E5%8C%BA%E6%8F%90%E4%BA%A4%E4%BB%A3%E7%A0%81/</url>
      <content type="html"><![CDATA[<h1 id="提交代码"><a href="#提交代码" class="headerlink" title="提交代码"></a>提交代码</h1><h2 id="git-review安装"><a href="#git-review安装" class="headerlink" title="git review安装"></a>git review安装</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">pip install git-review</div></pre></td></tr></table></figure>
<h2 id="git-配置"><a href="#git-配置" class="headerlink" title="git 配置"></a>git 配置</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"># 这里的名字必须是gerrit的名字</div><div class="line">git config gitreview.username lee</div><div class="line"></div><div class="line"># ssh用不了，使用https方式提交</div><div class="line">git config gitreview.scheme https</div><div class="line">git config gitreview.port 443</div><div class="line"></div><div class="line">git review -s -v</div></pre></td></tr></table></figure>
<h2 id="提交代码-1"><a href="#提交代码-1" class="headerlink" title="提交代码"></a>提交代码</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">git add --all</div><div class="line">git commit -m &quot;commit msg&quot;</div><div class="line"></div><div class="line">git review</div></pre></td></tr></table></figure>
]]></content>
      
        <categories>
            
            <category> openstack </category>
            
        </categories>
        
        
        <tags>
            
            <tag> openstack </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[leetcode Two Sum]]></title>
      <url>/2016/09/07/leetcode-001/</url>
      <content type="html"><![CDATA[<h2 id="题目："><a href="#题目：" class="headerlink" title="题目："></a>题目：</h2><p>Given an array of integers, return indices of the two numbers such that they add up to a specific target.</p>
<h2 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h2><p>这一题最直观的思路就是两层for循环，但是这样时间复杂度是O(n^2)。因为题目里告诉了只有唯一解，所有我们可以使用hash来做，具体算法如下：</p>
<figure class="highlight go"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">twoSum</span><span class="params">(nums []<span class="keyword">int</span>, target <span class="keyword">int</span>)</span> []<span class="title">int</span></span> &#123;</div><div class="line">    m1 := <span class="built_in">make</span>(<span class="keyword">map</span>[<span class="keyword">int</span>]<span class="keyword">int</span>)</div><div class="line">    <span class="keyword">for</span> index, value := <span class="keyword">range</span> nums &#123;</div><div class="line">        m1[value] = index</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">for</span> index, value := <span class="keyword">range</span> nums &#123;</div><div class="line">        complement := target - value</div><div class="line">        <span class="keyword">if</span> v, ok := m1[complement]; ok &#123;</div><div class="line">            <span class="keyword">if</span> m1[complement] != index &#123;</div><div class="line">                <span class="keyword">return</span> []<span class="keyword">int</span>&#123;index, v&#125;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> []<span class="keyword">int</span>&#123;&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>]]></content>
      
        <categories>
            
            <category> algorithm </category>
            
        </categories>
        
        
        <tags>
            
            <tag> leetcode </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[golang import]]></title>
      <url>/2016/07/05/golang-import/</url>
      <content type="html"><![CDATA[<h1 id="golang-import操作"><a href="#golang-import操作" class="headerlink" title="golang import操作"></a>golang import操作</h1><h2 id="import系统包"><a href="#import系统包" class="headerlink" title="import系统包"></a>import系统包</h2><p>在导入golang自带或者是我们安装的第三方库时，这些库都是直接以名字开头的，例如”fmt”, “container/list”。这些直接import即可。这个时候golang是从Go Tree（跟环境变量配置有关）里去寻找这些包。</p>
<pre><code>// 可以使用
import &quot;fmt&quot;
import &quot;os&quot;
import &quot;fmt&quot;; import &quot;os&quot;

// 推荐方法
import (
    &quot;fmt&quot;
    &quot;os&quot;
)
</code></pre><h2 id="immport自定义模块"><a href="#immport自定义模块" class="headerlink" title="immport自定义模块"></a>immport自定义模块</h2><p>在我们的project比较大时，我们常常会自己定义一些模块，在导入这些包时，我们需要使用绝对路径或者相对路径。</p>
<pre><code>// 导入自定义包
import ./model
</code></pre><h2 id="其它操作"><a href="#其它操作" class="headerlink" title="其它操作"></a>其它操作</h2><p>有时候我们在看一些开源代码或者框架介绍的时候，会在import的包名前面加一个“.”或着”_”。</p>
<ul>
<li><p>“.”的作用是在你使用这个包的函数时，可以省略报名</p>
<p>  // eg:<br>  import “fmt”<br>  Println(“hello”)</p>
</li>
<li><p>“_”的作用是在导入包的时候会之行包的init函数</p>
</li>
</ul>
<h2 id="使用别名"><a href="#使用别名" class="headerlink" title="使用别名"></a>使用别名</h2><pre><code>import (
    f &quot;fmt&quot;
)

func main() {
    f.Println(&quot;Hello, world&quot;)
}
</code></pre>]]></content>
      
        <categories>
            
            <category> golang </category>
            
        </categories>
        
        
        <tags>
            
            <tag> golang </tag>
            
        </tags>
        
    </entry>
    
  
  
</search>
